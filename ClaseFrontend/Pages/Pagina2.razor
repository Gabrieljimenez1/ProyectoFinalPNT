@page "/pagina2"
@using System.Net.Http.Json
@using ClaseFrontend.Data
@inject HttpClient client;
<h4>Añadir un libro</h4>
<MudIconButton Size="@Size.Small" Icon="@Icons.Filled.Add" OnClick="(args)=>AgregarNuevoRegistro()" />

<h3>TABLE BOOKS</h3>
<MudDataGrid T="Libro" Items="@Libros" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <Column T="Libro" Field="idlibro" IsEditable="false" />
        <Column T="Libro" Field="titulo" />
        <Column T="Libro" Field="editorial" />
        <Column T="Libro" Field="autor"/>
        <Column T="Libro" Field="pagina"/>
        <Column T="Libro" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" OnClick="(args)=>EliminarEvento(context.Item)" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>


@code {
    private IEnumerable<Libro> Libros = new List<Libro>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        var elemento = new List <Libro>();
        client.BaseAddress = new Uri("https://localhost:7174/");
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, "Biblioteca/ConsultarLibro");
        var respuesta = await client.SendAsync(requestMessage);

        if (respuesta.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var responseBody = await respuesta.Content.ReadAsStringAsync();
            var ListasLibro = System.Text.Json.JsonSerializer.Deserialize<List<Libro>>(responseBody);
            Libros = ListasLibro;
        }

    }


    async void EliminarEvento(Libro elemento)
    {
        var i = elemento.idlibro;
        ((List<Libro>)Libros).Remove(elemento);
        //client.BaseAddress = new Uri("https://localhost:7174/");
        var requestMessage = new HttpRequestMessage(HttpMethod.Delete, "Biblioteca/EliminarLibro?IdLibro="+i+"");
        var respuesta = await client.SendAsync(requestMessage);
        StateHasChanged();
    }
    async void AgregarNuevoRegistro()
    {
        Random rand = new Random();
        int randNum = rand.Next(1, 2500);
        var elemento = new Libro
            {
                autor = "Autor",
                titulo = "Titulo",
                editorial = "Editorial",
                pagina = randNum
            };
        ((List<Libro>)Libros).Add(elemento);

        //client.BaseAddress = Uri("https:localhost:7174/");
        var requestMessage = new HttpRequestMessage(HttpMethod.Post, "Biblioteca/AgregarLibro?Titulo=Titulo&Editorial=Editorial&Autor=Autor&Pagina="+randNum+"");
        var respuesta = await client.SendAsync(requestMessage);
        if (respuesta.StatusCode == System.Net.HttpStatusCode.OK)
        {
            
        }
        StateHasChanged();

    }
    // events
    void StartedEditingItem(Libro item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CancelledEditingItem(Libro item)
    {
        _events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    //Servira paa guardar o actualizar
    void CommittedItemChanges(Libro item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
        var elemento1 = new List <Libro>();
        //client.BaseAddress = new Uri("https://localhost:7174/");
        var requestMessage = new HttpRequestMessage(HttpMethod.Put, "Biblioteca/ActualizarLibro");
    }
}