@page "/pagina3"
@using System.Net.Http.Json
@using ClaseFrontend.Data
@inject HttpClient client;
<h4>Añadir un estudiante</h4>
<MudIconButton Size="@Size.Small" Icon="@Icons.Filled.Add" OnClick="(args)=>AgregarNuevoRegistro()" />

<h3>TABLE STUDENTS</h3>
<MudDataGrid T="Estudiante" Items="@Estudiantes" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <Column T="Estudiante" Field="id" Title="Id" IsEditable="false" />
        <Column T="Estudiante" Field="nombre" />
        <Column T="Estudiante" Field="carrera" />
        <Column T="Estudiante" Field="semestre"/>
        <Column T="Estudiante" Field="prestamos"/>
        <Column T="Estudiante" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" OnClick="(args)=>EliminarEvento(context.Item)" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>


@code {
    private IEnumerable<Estudiante> Estudiantes = new List<Estudiante>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {
        var elemento = new List <Estudiante>();
        client.BaseAddress = new Uri("https://localhost:7174/");
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, "Biblioteca/ConsultarEstudiante");
        var respuesta = await client.SendAsync(requestMessage);

        if (respuesta.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var responseBody = await respuesta.Content.ReadAsStringAsync();
            var ListasEstudiante = System.Text.Json.JsonSerializer.Deserialize<List<Estudiante>>(responseBody);
            Estudiantes = ListasEstudiante;
        }

    }


    async void EliminarEvento(Estudiante elemento)
    {
        var i = elemento.id;
        ((List<Estudiante>)Estudiantes).Remove(elemento);
        //client.BaseAddress = new Uri("https://localhost:7174/");
        var requestMessage = new HttpRequestMessage(HttpMethod.Delete, "Biblioteca/EliminarEstudiante?ID="+i+"");
        var respuesta = await client.SendAsync(requestMessage);
        StateHasChanged();
    }
    async void AgregarNuevoRegistro()
    {
        Random rand = new Random();
        int randNum1 = rand.Next(1, 10);

        var elemento = new Estudiante
            {
                nombre = "Juan Perez",
                carrera = "Ciencias Politicas",
                semestre = randNum1.ToString(),
                prestamos = randNum1,
            };
        ((List<Estudiante>)Estudiantes).Add(elemento);
        //client.BaseAddress = Uri("https:localhost:7174/");
        var requestMessage = new HttpRequestMessage(HttpMethod.Post, "Biblioteca/AgregarEstudiante?Nombre=Juan Perez&Carrera=Ciencias Politicas&Semestre="+randNum1+"&Prestamos="+randNum1+"");
        var respuesta = await client.SendAsync(requestMessage);
        if (respuesta.StatusCode == System.Net.HttpStatusCode.OK)
        {

        }
        StateHasChanged();


    }
    // events
    void StartedEditingItem(Estudiante item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CancelledEditingItem(Estudiante item)
    {
        _events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    //Servira paa guardar o actualizar
    async void CommittedItemChanges(Estudiante item)
    {
        var id = item.id;
        var name = item.nombre;
        var carr = item.carrera;
        var sem = item.semestre;
        var pres = item.prestamos;
        var requestMessage = new HttpRequestMessage(HttpMethod.Put, "Biblioteca/ActualizarEstudiante?ID="+id+"&Nombre="+name+"&Carrera="+carr+"&Semestre="+sem+"&Prestamos="+pres+"");
        var respuesta = await client.SendAsync(requestMessage);
        StateHasChanged();
    }
}